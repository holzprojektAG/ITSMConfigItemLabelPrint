<?xml version="1.0" encoding="utf-8" ?>
<otobo_package version="1.1">
    <Name>ITSMConfigItemLabelPrintHolzprojekt</Name>
    <Version>11.0.2</Version>
    <Vendor>holzprojekt AG</Vendor>
    <URL>https://holzprojekt.ch/</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007</License>
    <Description Lang="en">OTOBO::ITSM config item label print including barcode.</Description>
    <Description Lang="de">OTOBO::ITSM ConfigItem Label Druckfunktion mit Barcode.</Description>
    <Framework>11.0.x</Framework>
    <PackageMerge Name="RotherOSS-ITSMConfigItemLabelPrint" TargetVersion="11.0.1"></PackageMerge>
    <PackageRequired Version="11.0.0">ITSMConfigurationManagement</PackageRequired>
    <ModuleRequired>Text::QRCode</ModuleRequired>
    <BuildDate>2024-09-03 08:17:15</BuildDate>
    <BuildHost>ticket.holzprojekt.ch</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/XML/ITSMConfigItemLabelPrint.xml" Permission="660" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMConfigItemLabelPrint.pm" Permission="660" Encode="Base64"></File>
    </Filelist>
</otobo_package>