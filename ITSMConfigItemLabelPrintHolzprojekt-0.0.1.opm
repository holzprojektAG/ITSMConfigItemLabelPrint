<?xml version="1.0" encoding="utf-8" ?>
<otobo_package version="1.1">
    <Name>ITSMConfigItemLabelPrintHolzprojekt</Name>
    <Version>0.0.1</Version>
    <Vendor>holzprojekt AG</Vendor>
    <URL>https://holzprojekt.ch/</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007</License>
    <Description Lang="en">OTOBO::ITSM config item label print including barcode.</Description>
    <Description Lang="de">OTOBO::ITSM ConfigItem Label Druckfunktion mit Barcode.</Description>
    <Framework>11.0.x</Framework>
    <PackageMerge Name="RotherOSS-ITSMConfigItemLabelPrint" TargetVersion="11.0.1"></PackageMerge>
    <PackageRequired Version="11.0.0">ITSMConfigurationManagement</PackageRequired>
    <ModuleRequired>Text::QRCode</ModuleRequired>
    <BuildDate>2024-09-02 07:26:06</BuildDate>
    <BuildHost>ticket.holzprojekt.ch</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/XML/ITSMConfigItemLabelPrint.xml" Permission="660" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMConfigItemLabelPrint.pm" Permission="660" Encode="Base64">IyAtLQ0KIyBPVE9CTyBpcyBhIHdlYi1iYXNlZCB0aWNrZXRpbmcgc3lzdGVtIGZvciBzZXJ2aWNlIG9yZ2FuaXNhdGlvbnMuDQojIC0tDQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTUNvbmZpZ0l0ZW1MYWJlbFByaW50LnBtIC0gcHJpbnQgbGF5b3V0IGZvciBpdHNtIGNvbmZpZyBpdGVtIGFnZW50IGludGVyZmFjZQ0KIyBDb3B5cmlnaHQgKEMpIDIwMTktMjAyNCBSb3RoZXIgT1NTIEdtYkgsIGh0dHBzOi8vb3RvYm8uaW8vDQojIC0tDQojIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyDQojIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlDQojIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uDQojIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVA0KIyBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUw0KIyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4NCiMgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UNCiMgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uDQojIC0tDQoNCnBhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudElUU01Db25maWdJdGVtTGFiZWxQcmludDsNCg0KdXNlIHN0cmljdDsNCnVzZSB3YXJuaW5nczsNCg0KIyBjb3JlIG1vZHVsZXMNCg0KIyBDUEFOIG1vZHVsZXMNCg0KIyBPVE9CTyBtb2R1bGVzDQp1c2UgS2VybmVsOjpMYW5ndWFnZSBxdyhUcmFuc2xhdGFibGUpOw0KDQpvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7DQoNCnN1YiBuZXcgew0KICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87DQoNCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QNCiAgICBteSAkU2VsZiA9IHslUGFyYW19Ow0KICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsNCg0KICAgICMgc2V0IGRlZmF1bHQgdmFsdWVzIGZvciBtbQ0KICAgICRTZWxmLT57bW19ID0gMjUuNCAvIDcyOw0KDQogICAgcmV0dXJuICRTZWxmOw0KfQ0KDQpzdWIgUnVuIHsNCiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOw0KDQogICAgIyBnZXQgbmVlZGVkIG9iamVjdHMNCiAgICBteSAkQ29uZmlnSXRlbU9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbScpOw0KICAgIG15ICRDb25maWdPYmplY3QgICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKTsNCiAgICBteSAkTGF5b3V0T2JqZWN0ICAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKTsNCiAgICBteSAkUGFyYW1PYmplY3QgICAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpXZWI6OlJlcXVlc3QnKTsNCiAgICBteSAkUERGT2JqZWN0ICAgICAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpQREYnKTsNCg0KICAgICMgZ2V0IHBhcmFtcw0KICAgIG15ICRDb25maWdJdGVtSUQgPSAkUGFyYW1PYmplY3QtPkdldFBhcmFtKCBQYXJhbSA9PiAnQ29uZmlnSXRlbUlEJyApOw0KICAgIG15ICRWZXJzaW9uSUQgICAgPSAkUGFyYW1PYmplY3QtPkdldFBhcmFtKCBQYXJhbSA9PiAnVmVyc2lvbklEJyApOw0KDQogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYNCiAgICBpZiAoICEkQ29uZmlnSXRlbUlEIHx8ICEkVmVyc2lvbklEICkgew0KICAgICAgICByZXR1cm4gJExheW91dE9iamVjdC0+RXJyb3JTY3JlZW4oDQogICAgICAgICAgICBNZXNzYWdlID0+ICdObyBDb25maWdJdGVtSUQgb3IgVmVyc2lvbklEIGlzIGdpdmVuIScsDQogICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywNCiAgICAgICAgKTsNCiAgICB9DQoNCiAgICAjIGdldCBjb25maWcgb2YgZnJvbnRlbmQgbW9kdWxlDQogICAgJFNlbGYtPntDb25maWd9ID0gJENvbmZpZ09iamVjdC0+R2V0KCJJVFNNQ29uZmlnSXRlbTo6RnJvbnRlbmQ6OiRTZWxmLT57QWN0aW9ufSIpOw0KDQogICAgIyBnZXQgY29uZmlnIGl0ZW0gYnkgdmVyc2lvbiBpZA0KICAgIG15ICRDb25maWdJdGVtID0gJENvbmZpZ0l0ZW1PYmplY3QtPkNvbmZpZ0l0ZW1HZXQoDQogICAgICAgIFZlcnNpb25JRCAgICAgPT4gJFZlcnNpb25JRCwNCiAgICAgICAgRHluYW1pY0ZpZWxkcyA9PiAxLA0KICAgICk7DQoNCiAgICAjIGNoZWNrIGlmIGNvbmZpZyBpdGVtIGV4aXN0cw0KICAgIGlmICggISRDb25maWdJdGVtLT57Q29uZmlnSXRlbUlEfSApIHsNCiAgICAgICAgcmV0dXJuICRMYXlvdXRPYmplY3QtPkVycm9yU2NyZWVuKA0KICAgICAgICAgICAgTWVzc2FnZSA9PiAiTm8gY29uZmlnIGl0ZW0gZm91bmQgZm9yIGNvbmZpZyBpdGVtIGlkICRDb25maWdJdGVtSUQgYW5kIHZlcnNpb24gaWQgJFZlcnNpb25JRCEiLA0KICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsDQogICAgICAgICk7DQogICAgfQ0KDQogICAgIyBjaGVjayBpZiBjb25maWcgaXRlbSBpZCBhbmQgdmVyc2lvbiBpZCBmcm9tIHJlcXVlc3QgcmVmZXIgdG8gc2FtZSBjb25maWcgaXRlbQ0KICAgIGlmICggJENvbmZpZ0l0ZW0tPntDb25maWdJdGVtSUR9ICE9ICRDb25maWdJdGVtSUQgKSB7DQogICAgICAgIGlmICggISRDb25maWdJdGVtLT57Q29uZmlnSXRlbUlEfSApIHsNCiAgICAgICAgICAgIHJldHVybiAkTGF5b3V0T2JqZWN0LT5FcnJvclNjcmVlbigNCiAgICAgICAgICAgICAgICBNZXNzYWdlID0+ICJJbnZhbGlkIHJlcXVlc3QhIiwNCiAgICAgICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywNCiAgICAgICAgICAgICk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAjIGNoZWNrIGZvciBhY2Nlc3MgcmlnaHRzDQogICAgbXkgJEhhc0FjY2VzcyA9ICRDb25maWdJdGVtT2JqZWN0LT5QZXJtaXNzaW9uKA0KICAgICAgICBTY29wZSAgPT4gJ0l0ZW0nLA0KICAgICAgICBJdGVtSUQgPT4gJENvbmZpZ0l0ZW0tPntDb25maWdJdGVtSUR9LA0KICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9LA0KICAgICAgICBUeXBlICAgPT4gJFNlbGYtPntDb25maWd9e1Blcm1pc3Npb259LA0KICAgICk7DQoNCiAgICBpZiAoICEkSGFzQWNjZXNzICkgew0KDQogICAgICAgICMgZXJyb3IgcGFnZQ0KICAgICAgICByZXR1cm4gJExheW91dE9iamVjdC0+RXJyb3JTY3JlZW4oDQogICAgICAgICAgICBNZXNzYWdlID0+ICdDYW5cJ3Qgc2hvdyBjb25maWcgaXRlbSwgbm8gYWNjZXNzIHJpZ2h0cyBnaXZlbiEnLA0KICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsDQogICAgICAgICk7DQogICAgfQ0KDQogICAgIyBwcmVwYXJlIFBERg0KICAgIG15ICVQYWdlID0gKA0KICAgICAgICBXaWR0aCAgICAgICAgICAgPT4gJFNlbGYtPntDb25maWd9e1BhZ2VTZXR0aW5nfXtQYWdlV2lkdGh9IC8gJFNlbGYtPnttbX0sICAgICAjIChvcHRpb25hbCkgZGVmYXVsdCA1OTUgKERpbiBBNCkgLSBfIGJvdGggb3Igbm90aGluZw0KICAgICAgICBIZWlnaHQgICAgICAgICAgPT4gJFNlbGYtPntDb25maWd9e1BhZ2VTZXR0aW5nfXtQYWdlSGVpZ2h0fSAvICRTZWxmLT57bW19LCAgICAjIChvcHRpb25hbCkgZGVmYXVsdCA4NDIgKERpbiBBNCkgLQ0KICAgICAgICBQYWdlT3JpZW50YXRpb24gPT4gJFNlbGYtPntDb25maWd9e1BhZ2VTZXR0aW5nfXtQYWdlT3JpZW50YXRpb259LCAgICAgICAgICAgICAjIChvcHRpb25hbCkgZGVmYXVsdCBub3JtYWwgKG5vcm1hbHxsYW5kc2NhcGUpDQogICAgICAgIE1hcmdpblRvcCAgICAgICA9PiAkU2VsZi0+e0NvbmZpZ317UGFnZVNldHRpbmd9e01hcmdpblRvcH0sICAgICAgICAgICAgICAgICAgICMgKG9wdGlvbmFsKSBkZWZhdWx0IDAgLQ0KICAgICAgICBNYXJnaW5SaWdodCAgICAgPT4gJFNlbGYtPntDb25maWd9e1BhZ2VTZXR0aW5nfXtNYXJnaW5SaWdodH0sICAgICAgICAgICAgICAgICAjIChvcHRpb25hbCkgZGVmYXVsdCAwICB8XyBhbGwgb3Igbm90aGluZw0KICAgICAgICBNYXJnaW5Cb3R0b20gICAgPT4gJFNlbGYtPntDb25maWd9e1BhZ2VTZXR0aW5nfXtNYXJnaW5Cb3R0b219LCAgICAgICAgICAgICAgICAjIChvcHRpb25hbCkgZGVmYXVsdCAwICB8DQogICAgICAgIE1hcmdpbkxlZnQgICAgICA9PiAkU2VsZi0+e0NvbmZpZ317UGFnZVNldHRpbmd9e01hcmdpbkxlZnR9LCAgICAgICAgICAgICAgICAgICMgKG9wdGlvbmFsKSBkZWZhdWx0IDAgLQ0KICAgICAgICBTaG93UGFnZU51bWJlciAgPT4gMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIChvcHRpb25hbCkgZGVmYXVsdCAxDQogICAgKTsNCg0KICAgICMgY3JlYXRlIG5ldyBwZGYgZG9jdW1lbnQNCiAgICAkUERGT2JqZWN0LT5Eb2N1bWVudE5ldygNCiAgICAgICAgRW5jb2RlID0+ICRMYXlvdXRPYmplY3QtPntVc2VyQ2hhcnNldH0sDQogICAgKTsNCg0KICAgICMgY3JlYXRlIGZpcnN0IHBkZiBwYWdlDQogICAgJFBERk9iamVjdC0+UGFnZUJsYW5rTmV3KA0KICAgICAgICAlUGFnZSwNCiAgICApOw0KDQogICAgIyBvdXRwdXQgZ2VuZXJhbCBpbmZvcm1hdGlvbg0KICAgICRTZWxmLT5fUERGT3V0cHV0R2VuZXJhbEluZm9zKA0KICAgICAgICBQYWdlICAgICAgID0+IFwlUGFnZSwNCiAgICAgICAgQ29uZmlnSXRlbSA9PiAkQ29uZmlnSXRlbSwNCiAgICApOw0KDQogICAgbXkgJFBERlN0cmluZyA9ICRQREZPYmplY3QtPkRvY3VtZW50T3V0cHV0KCk7DQoNCiAgICAjIGdldCBjdXJyZW50IHRpbWVzdGFtcCBmb3IgZmlsZW5hbWUNCiAgICBteSAkRGF0ZVRpbWVPYmplY3QgPSAkS2VybmVsOjpPTS0+Q3JlYXRlKCdLZXJuZWw6OlN5c3RlbTo6RGF0ZVRpbWUnKTsNCiAgICBpZiAoICRTZWxmLT57VXNlclRpbWVab25lfSApIHsNCiAgICAgICAgJERhdGVUaW1lT2JqZWN0LT5Ub1RpbWVab25lKCBUaW1lWm9uZSA9PiAkU2VsZi0+e1VzZXJUaW1lWm9uZX0gKTsNCiAgICB9DQoNCiAgICAjIGNyZWF0ZSBmaWxlbmFtZQ0KICAgIG15ICRGaWxlbmFtZSA9ICdjb25maWdpdGVtXycgLiAkQ29uZmlnSXRlbS0+e051bWJlcn0gLiAnXyc7DQogICAgJEZpbGVuYW1lIC49ICREYXRlVGltZU9iamVjdC0+Rm9ybWF0KCBGb3JtYXQgPT4gJyVZLSVtLSVkXyVIOiVNJyApOw0KICAgICRGaWxlbmFtZSAuPSAnLnBkZic7DQogICAgbXkgJENsZWFuZWRGaWxlbmFtZSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpNYWluJyktPkZpbGVuYW1lQ2xlYW5VcCgNCiAgICAgICAgRmlsZW5hbWUgPT4gJEZpbGVuYW1lLA0KICAgICAgICBUeXBlICAgICA9PiAnQXR0YWNobWVudCcsDQogICAgKTsNCg0KICAgIG15ICVBdHRhY2htZW50RGF0YSA9ICgNCiAgICAgICAgRmlsZW5hbWUgICAgPT4gJENsZWFuZWRGaWxlbmFtZSwNCiAgICAgICAgQ29udGVudFR5cGUgPT4gJ2FwcGxpY2F0aW9uL3BkZicsDQogICAgICAgIENvbnRlbnQgICAgID0+ICRQREZTdHJpbmcsDQogICAgICAgIERpc3Bvc2l0aW9uID0+ICdhdHRhY2htZW50JywNCiAgICApOw0KDQogICAgcmV0dXJuICRMYXlvdXRPYmplY3QtPkF0dGFjaG1lbnQoDQogICAgICAgICVBdHRhY2htZW50RGF0YSwNCiAgICApOw0KfQ0KDQpzdWIgX1BERk91dHB1dEdlbmVyYWxJbmZvcyB7DQogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsNCg0KICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmDQogICAgZm9yIG15ICRBcmd1bWVudCAocXcoUGFnZSBDb25maWdJdGVtKSkgew0KICAgICAgICBpZiAoICFkZWZpbmVkICRQYXJhbXskQXJndW1lbnR9ICkgew0KICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coDQogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywNCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwNCiAgICAgICAgICAgICk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAjIGdldCBuZWVkZWQgb2JqZWN0cw0KICAgIG15ICRMYXlvdXRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Jyk7DQogICAgbXkgJFBERk9iamVjdCAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpQREYnKTsNCg0KICAgICMgZ2V0IHJlYWRhYmxlIHZhbHVlcyBmb3IgY29uZmlnIGl0ZW0gZHluYW1pYyBmaWVsZHMNCiAgICBteSAlUmVhZGFibGVDb25maWdJdGVtRGF0YTsNCiAgICBmb3IgbXkgJEtleSAoIGtleXMgJFBhcmFte0NvbmZpZ0l0ZW19LT4lKiApIHsNCg0KICAgICAgICBpZiAoICRLZXkgPX4gL15EeW5hbWljRmllbGRfKC4rKSQvICkgew0KDQogICAgICAgICAgICAjIGdldCBmaWVsZCBjb25maWcNCiAgICAgICAgICAgIG15ICRGaWVsZE5hbWUgICAgICAgICAgPSAkMTsNCiAgICAgICAgICAgIG15ICREeW5hbWljRmllbGRDb25maWcgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkJyktPkR5bmFtaWNGaWVsZEdldCgNCiAgICAgICAgICAgICAgICBOYW1lID0+ICRGaWVsZE5hbWUsDQogICAgICAgICAgICApOw0KDQogICAgICAgICAgICAjIGZldGNoIGFuZCBzZXQgdmFsdWUNCiAgICAgICAgICAgIG15ICRWYWx1ZVN0cmcgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkOjpCYWNrZW5kJyktPlJlYWRhYmxlVmFsdWVSZW5kZXIoDQogICAgICAgICAgICAgICAgRHluYW1pY0ZpZWxkQ29uZmlnID0+ICREeW5hbWljRmllbGRDb25maWcsDQogICAgICAgICAgICAgICAgVmFsdWUgICAgICAgICAgICAgID0+ICRQYXJhbXtDb25maWdJdGVtfXskS2V5fSwNCiAgICAgICAgICAgICAgICBWYWx1ZU1heENoYXJzICAgICAgPT4gMzAsDQogICAgICAgICAgICAgICAgVGl0bGVNYXhDaGFycyAgICAgID0+IDMwLA0KICAgICAgICAgICAgKTsNCiAgICAgICAgICAgICRSZWFkYWJsZUNvbmZpZ0l0ZW1EYXRheyRLZXl9ID0gJFZhbHVlU3RyZy0+e1ZhbHVlfTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICRSZWFkYWJsZUNvbmZpZ0l0ZW1EYXRheyRLZXl9ID0gJFBhcmFte0NvbmZpZ0l0ZW19eyRLZXl9Ow0KICAgICAgICB9DQogICAgfQ0KDQogICAgIyBwcmludCBMb2dvDQogICAgaWYgKCAkU2VsZi0+e0NvbmZpZ317TG9nb1NldHRpbmd9ICkgew0KDQogICAgICAgICMgY2hlY2sgaWYgZmlsZSBleGlzdHMNCiAgICAgICAgbXkgJEhvbWUgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpLT5HZXQoJ0hvbWUnKTsNCiAgICAgICAgbXkgJFBhdGggPSAiJEhvbWUvJFNlbGYtPntDb25maWd9e0xvZ29TZXR0aW5nfXtMb2dvUGF0aH0iOw0KICAgICAgICBpZiAoIC1lICRQYXRoICkgew0KDQogICAgICAgICAgICAkUERGT2JqZWN0LT5Qb3NpdGlvblNldCgNCiAgICAgICAgICAgICAgICBYID0+ICRTZWxmLT57Q29uZmlnfXtMb2dvU2V0dGluZ317SW1hZ2VQb3NpdGlvbl9YfSwNCiAgICAgICAgICAgICAgICBZID0+ICRTZWxmLT57Q29uZmlnfXtMb2dvU2V0dGluZ317SW1hZ2VQb3NpdGlvbl9ZfSwNCiAgICAgICAgICAgICk7DQoNCiAgICAgICAgICAgIG15ICVJbWFnZSA9ICgNCiAgICAgICAgICAgICAgICBGaWxlICAgPT4gJFBhdGgsDQogICAgICAgICAgICAgICAgVHlwZSAgID0+ICRTZWxmLT57Q29uZmlnfXtMb2dvU2V0dGluZ317RGlzcGxheVR5cGV9LA0KICAgICAgICAgICAgICAgIFdpZHRoICA9PiAkU2VsZi0+e0NvbmZpZ317TG9nb1NldHRpbmd9e0ltYWdlV2lkdGh9LA0KICAgICAgICAgICAgICAgIEhlaWdodCA9PiAkU2VsZi0+e0NvbmZpZ317TG9nb1NldHRpbmd9e0ltYWdlSGVpZ2h0fSwNCiAgICAgICAgICAgICk7DQoNCiAgICAgICAgICAgICRQREZPYmplY3QtPkltYWdlKCVJbWFnZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAjIHByaW50IFRhYmxlDQogICAgaWYgKCAkU2VsZi0+e0NvbmZpZ317VGFibGVTZXR0aW5nfSApIHsNCg0KICAgICAgICAkUERGT2JqZWN0LT5Qb3NpdGlvblNldCgNCiAgICAgICAgICAgIFggPT4gJFNlbGYtPntDb25maWd9e1RhYmxlU2V0dGluZ317VGFibGVQb3NpdGlvbl9YfSwNCiAgICAgICAgICAgIFkgPT4gJFNlbGYtPntDb25maWd9e1RhYmxlU2V0dGluZ317VGFibGVQb3NpdGlvbl9ZfSwNCiAgICAgICAgKTsNCg0KICAgICAgICBteSAlVGFibGVQYXJhbTsNCg0KICAgICAgICAkVGFibGVQYXJhbXtDZWxsRGF0YX1bMF1bMF17Rm9udH0gICAgID0gJ1Byb3BvcnRpb25hbEJvbGQnOw0KICAgICAgICAkVGFibGVQYXJhbXtDZWxsRGF0YX1bMF1bMF17Rm9udFNpemV9ID0gJFNlbGYtPntDb25maWd9e1RhYmxlU2V0dGluZ317Rm9udFNpemV9Ow0KICAgICAgICAkVGFibGVQYXJhbXtDZWxsRGF0YX1bMF1bMF17QWxpZ259ICAgID0gJ2xlZnQnOw0KICAgICAgICAkVGFibGVQYXJhbXtDZWxsRGF0YX1bMF1bMF17Q29udGVudH0gID0gJFJlYWRhYmxlQ29uZmlnSXRlbURhdGF7J05hbWUnfTsNCg0KICAgICAgICAkVGFibGVQYXJhbXtDZWxsRGF0YX1bMV1bMF17Rm9udH0gICAgID0gJ1Byb3BvcnRpb25hbCc7DQogICAgICAgICRUYWJsZVBhcmFte0NlbGxEYXRhfVsxXVswXXtGb250U2l6ZX0gPSAkU2VsZi0+e0NvbmZpZ317VGFibGVTZXR0aW5nfXtGb250U2l6ZX07DQogICAgICAgICRUYWJsZVBhcmFte0NlbGxEYXRhfVsxXVswXXtBbGlnbn0gICAgPSAnbGVmdCc7DQoNCiAgICAgICAgIyBFbnN1cmUgdGhhdCBlYWNoIHZhcmlhYmxlIGlzIGEgc3RyaW5nIGFuZCBzZXQgZGVmYXVsdCB0byBhbiBlbXB0eSBzdHJpbmcgaWYgbm90IGRlZmluZWQgb3IgZW1wdHkNCiAgICAgICAgbXkgJGhhcmR3YXJlX3NuID0gZGVmaW5lZCAkUmVhZGFibGVDb25maWdJdGVtRGF0YXsnRHluYW1pY0ZpZWxkX0hhcmR3YXJlLVNlcmlhbE51bWJlcid9DQogICAgICAgICAgICA/IChsZW5ndGgoJFJlYWRhYmxlQ29uZmlnSXRlbURhdGF7J0R5bmFtaWNGaWVsZF9IYXJkd2FyZS1TZXJpYWxOdW1iZXInfSkgPiAwDQogICAgICAgICAgICAgICAgPyAiJFJlYWRhYmxlQ29uZmlnSXRlbURhdGF7J0R5bmFtaWNGaWVsZF9IYXJkd2FyZS1TZXJpYWxOdW1iZXInfSINCiAgICAgICAgICAgICAgICA6ICIiKQ0KICAgICAgICAgICAgOiAiIjsNCg0KICAgICAgICBteSAkY29tcHV0ZXJfc24gPSBkZWZpbmVkICRSZWFkYWJsZUNvbmZpZ0l0ZW1EYXRheydEeW5hbWljRmllbGRfQ29tcHV0ZXItU2VyaWFsTnVtYmVyJ30NCiAgICAgICAgICAgID8gKGxlbmd0aCgkUmVhZGFibGVDb25maWdJdGVtRGF0YXsnRHluYW1pY0ZpZWxkX0NvbXB1dGVyLVNlcmlhbE51bWJlcid9KSA+IDANCiAgICAgICAgICAgICAgICA/ICIkUmVhZGFibGVDb25maWdJdGVtRGF0YXsnRHluYW1pY0ZpZWxkX0NvbXB1dGVyLVNlcmlhbE51bWJlcid9Ig0KICAgICAgICAgICAgICAgIDogIiIpDQogICAgICAgICAgICA6ICIiOw0KDQogICAgICAgIG15ICRzb2Z0d2FyZV9zbiA9IGRlZmluZWQgJFJlYWRhYmxlQ29uZmlnSXRlbURhdGF7J0R5bmFtaWNGaWVsZF9Tb2Z0d2FyZS1TZXJpYWxOdW1iZXInfQ0KICAgICAgICAgICAgPyAobGVuZ3RoKCRSZWFkYWJsZUNvbmZpZ0l0ZW1EYXRheydEeW5hbWljRmllbGRfU29mdHdhcmUtU2VyaWFsTnVtYmVyJ30pID4gMA0KICAgICAgICAgICAgICAgID8gIiRSZWFkYWJsZUNvbmZpZ0l0ZW1EYXRheydEeW5hbWljRmllbGRfU29mdHdhcmUtU2VyaWFsTnVtYmVyJ30iDQogICAgICAgICAgICAgICAgOiAiIikNCiAgICAgICAgICAgIDogIiI7DQoNCiAgICAgICAgIyBJZiBhdCBsZWFzdCBvbmUgb2YgdGhlIFNlcmlhbCBOdW1iZXJzIGlzIG5vdCBlbXB0eSwgc2V0IFMvTiwgb3RoZXJ3aXNlIGVtcHR5DQogICAgICAgIGlmICgkaGFyZHdhcmVfc24gbmUgJycgfHwgJGNvbXB1dGVyX3NuIG5lICcnIHx8ICRzb2Z0d2FyZV9zbiBuZSAnJykgew0KICAgICAgICAgICAgJFRhYmxlUGFyYW17Q2VsbERhdGF9WzFdWzBde0NvbnRlbnR9ID0gIlMvTjogJGhhcmR3YXJlX3NuICRjb21wdXRlcl9zbiAkc29mdHdhcmVfc24iOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJFRhYmxlUGFyYW17Q2VsbERhdGF9WzFdWzBde0NvbnRlbnR9ID0gJyc7DQogICAgICAgIH0NCg0KICAgICAgICB1c2Ugc3RyaWN0Ow0KICAgICAgICB1c2Ugd2FybmluZ3M7DQogICAgICAgIHVzZSBUaW1lOjpQaWVjZTsNCg0KICAgICAgICAjIEZ1bmN0aW9uIGZvciBjb252ZXJ0aW5nIGFuZCBjb21wYXJpbmcgZGF0ZSB2YWx1ZXMNCiAgICAgICAgc3ViIGNoZWNrX2FuZF9mb3JtYXRfZGF0ZSB7DQogICAgICAgICAgICBteSAoJGRhdGVfc3RyKSA9IEBfOw0KICAgICAgICAgICAgbXkgJGZvcm1hdHRlZF9kYXRlID0gJyc7DQoNCiAgICAgICAgICAgICMgQ2hlY2sgaWYgdGhlIGRhdGUgdGV4dCBpcyBkZWZpbmVkIGFuZCBub3QgZW1wdHkNCiAgICAgICAgICAgIGlmIChkZWZpbmVkICRkYXRlX3N0ciAmJiBsZW5ndGgoJGRhdGVfc3RyKSA+IDApIHsNCiAgICAgICAgICAgICAgICBldmFsIHsNCiAgICAgICAgICAgICAgICAgICAgbXkgJGRhdGUgPSBUaW1lOjpQaWVjZS0+c3RycHRpbWUoJGRhdGVfc3RyLCAnJVktJW0tJWQnKTsNCiAgICAgICAgICAgICAgICAgICAgbXkgJHRvZGF5ID0gVGltZTo6UGllY2UtPm5ldzsgICMgYWt0dWVsbGVzIERhdHVtDQogICAgICAgICAgICAgICAgICAgIGlmICgkZGF0ZSA8ICR0b2RheSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJGZvcm1hdHRlZF9kYXRlID0gJyc7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkZm9ybWF0dGVkX2RhdGUgPSAkZGF0ZS0+c3RyZnRpbWUoJyVkLiVtLiVZJyk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICMgRXJyb3IgaGFuZGxpbmcgZm9yIGludmFsaWQgZGF0ZSBmb3JtYXRzDQogICAgICAgICAgICAgICAgaWYgKCRAKSB7DQogICAgICAgICAgICAgICAgICAgIHdhcm4gIkRhdGUgcGFyc2luZyBlcnJvcjogJEAiOw0KICAgICAgICAgICAgICAgICAgICAkZm9ybWF0dGVkX2RhdGUgPSAnJzsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiAkZm9ybWF0dGVkX2RhdGU7DQogICAgICAgIH0NCg0KICAgICMgRW5zdXJlIHRoYXQgZWFjaCB2YXJpYWJsZSBpcyBhIHN0cmluZyBhbmQgc2V0IGRlZmF1bHQgdG8gYW4gZW1wdHkgc3RyaW5nIGlmIG5vdCBkZWZpbmVkIG9yIGVtcHR5DQoJbXkgJGhhcmR3YXJlX3dlZCA9IGNoZWNrX2FuZF9mb3JtYXRfZGF0ZSgkUmVhZGFibGVDb25maWdJdGVtRGF0YXsnRHluYW1pY0ZpZWxkX0hhcmR3YXJlLVdhcnJhbnR5RXhwaXJhdGlvbkRhdGUnfSk7DQoJbXkgJGNvbXB1dGVyX3dlZCA9IGNoZWNrX2FuZF9mb3JtYXRfZGF0ZSgkUmVhZGFibGVDb25maWdJdGVtRGF0YXsnRHluYW1pY0ZpZWxkX0NvbXB1dGVyLVdhcnJhbnR5RXhwaXJhdGlvbkRhdGUnfSk7DQoNCgkjIFdlbm4gbWluZGVzdGVucyBlaW5lciBkZXIgYmVpZGVuIFdlcnRlIG5pY2h0IGxlZXIgaXN0LCBzZXR6ZSBXRUQNCglpZiAoJGhhcmR3YXJlX3dlZCBuZSAnJyB8fCAkY29tcHV0ZXJfd2VkIG5lICcnKSB7DQoJCSRUYWJsZVBhcmFte0NlbGxEYXRhfVsyXVswXXtGb250fSAgICAgPSAnUHJvcG9ydGlvbmFsJzsNCgkJJFRhYmxlUGFyYW17Q2VsbERhdGF9WzJdWzBde0ZvbnRTaXplfSA9ICRTZWxmLT57Q29uZmlnfXtUYWJsZVNldHRpbmd9e0ZvbnRTaXplfTsNCgkJJFRhYmxlUGFyYW17Q2VsbERhdGF9WzJdWzBde0FsaWdufSAgICA9ICdsZWZ0JzsNCgkJJFRhYmxlUGFyYW17Q2VsbERhdGF9WzJdWzBde0NvbnRlbnR9ICA9ICJXRUQ6ICRoYXJkd2FyZV93ZWQgJGNvbXB1dGVyX3dlZCI7DQoJfQ0KDQogICAgICAgICRUYWJsZVBhcmFte0NvbHVtbkRhdGF9WzBde1dpZHRofSA9ICRTZWxmLT57Q29uZmlnfXtUYWJsZVNldHRpbmd9e1ZhbHVlV2lkdGh9Ow0KICAgICAgICAkVGFibGVQYXJhbXtUeXBlfSAgICAgICAgICAgICAgICAgPSAkU2VsZi0+e0NvbmZpZ317VGFibGVTZXR0aW5nfXtUeXBlfTsNCiAgICAgICAgJFRhYmxlUGFyYW17Qm9yZGVyfSAgICAgICAgICAgICAgID0gJFNlbGYtPntDb25maWd9e1RhYmxlU2V0dGluZ317Qm9yZGVyfTsNCiAgICAgICAgJFRhYmxlUGFyYW17Rm9udFNpemV9ICAgICAgICAgICAgID0gJFNlbGYtPntDb25maWd9e1RhYmxlU2V0dGluZ317Rm9udFNpemV9Ow0KICAgICAgICAkVGFibGVQYXJhbXtQYWRkaW5nfSAgICAgICAgICAgICAgPSAkU2VsZi0+e0NvbmZpZ317VGFibGVTZXR0aW5nfXtQYWRkaW5nfTsNCiAgICAgICAgJFRhYmxlUGFyYW17UGFkZGluZ1RvcH0gICAgICAgICAgID0gJFNlbGYtPntDb25maWd9e1RhYmxlU2V0dGluZ317UGFkZGluZ1RvcH07DQogICAgICAgICRUYWJsZVBhcmFte1BhZGRpbmdCb3R0b219ICAgICAgICA9ICRTZWxmLT57Q29uZmlnfXtUYWJsZVNldHRpbmd9e1BhZGRpbmdCb3R0b219Ow0KICAgICAgICAkVGFibGVQYXJhbXtQYWRkaW5nTGVmdH0gICAgICAgICAgPSAkU2VsZi0+e0NvbmZpZ317VGFibGVTZXR0aW5nfXtQYWRkaW5nTGVmdH07DQogICAgICAgICRUYWJsZVBhcmFte1BhZGRpbmdSaWdodH0gICAgICAgICA9ICRTZWxmLT57Q29uZmlnfXtUYWJsZVNldHRpbmd9e1BhZGRpbmdSaWdodH07DQoNCiAgICAgICAgIyBvdXRwdXQgdGFibGUgKG9yIGEgZnJhZ21lbnQgb2YgaXQpDQogICAgICAgICVUYWJsZVBhcmFtID0gJFBERk9iamVjdC0+VGFibGUoJVRhYmxlUGFyYW0pOw0KICAgIH0NCg0KDQogICAgIyBTZXQgd2luZG93IHByZWZlcmVuY2VzDQogICAgJFBERk9iamVjdC0+UG9zaXRpb25TZXQoDQogICAgICAgIFggPT4gImxlZnQiLA0KICAgICAgICBZID0+ICJ0b3AiLA0KICAgICk7DQoNCiAgICAjIHByaW50IEJhcmNvZGUNCiAgICBpZiAoICRTZWxmLT57Q29uZmlnfXtCYXJjb2RlU2V0dGluZ30gKSB7DQoNCiAgICAgICAgbXkgJERhdGEgPSAkUGFyYW17Q29uZmlnSXRlbX17ICRTZWxmLT57Q29uZmlnfXtCYXJjb2RlU2V0dGluZ317QmFyY29kZUZpZWxkfSB9Ow0KDQogICAgICAgICMgY3JlYXRlIGxpbmsgaW4gY2FzZSBvZiBRUiBjb2RlDQogICAgICAgIGlmICggJFNlbGYtPntDb25maWd9e0JhcmNvZGVTZXR0aW5nfXtDb2RlfSBlcSAncXInICkgew0KDQogICAgICAgICAgICBpZiAoICRTZWxmLT57Q29uZmlnfXtCYXJjb2RlU2V0dGluZ317UVJDb2RlTGlua30gPX4gL0lUU01Db25maWdJdGVtWm9vbSQvICkgew0KDQogICAgICAgICAgICAgICAgIyBnZXQgbGluayBwYXJ0cw0KICAgICAgICAgICAgICAgIG15ICRDb25maWdPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpOw0KICAgICAgICAgICAgICAgIG15ICRIVFRQVHlwZSAgICAgPSAkQ29uZmlnT2JqZWN0LT5HZXQoJ0h0dHBUeXBlJyk7DQogICAgICAgICAgICAgICAgbXkgJEZRRE4gICAgICAgICA9ICRDb25maWdPYmplY3QtPkdldCgnRlFETicpOw0KDQogICAgICAgICAgICAgICAgJERhdGEgPSAiJEhUVFBUeXBlOi8vJEZRRE4vb3RvYm8vaW5kZXgucGw/QWN0aW9uPSRTZWxmLT57Q29uZmlnfXtCYXJjb2RlU2V0dGluZ317UVJDb2RlTGlua307Q29uZmlnSXRlbUlEPSRQYXJhbXtDb25maWdJdGVtfXtDb25maWdJdGVtSUR9IjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2lmICggJFNlbGYtPntDb25maWd9e0JhcmNvZGVTZXR0aW5nfXtRUkNvZGVMaW5rfSBlcSAnQ3VzdG9tJyApIHsNCiAgICAgICAgICAgICAgICAkRGF0YSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKS0+T3V0cHV0KA0KICAgICAgICAgICAgICAgICAgICBUZW1wbGF0ZSA9PiAkU2VsZi0+e0NvbmZpZ317QmFyY29kZVNldHRpbmd9e0N1c3RvbUxpbmt9LA0KICAgICAgICAgICAgICAgICAgICBEYXRhICAgICA9PiAkUGFyYW17Q29uZmlnSXRlbX0sDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIG15ICVPcHRpb25zID0gKA0KICAgICAgICAgICAgJ2Jhcl9oZWlnaHQnICAgPT4gJFNlbGYtPntDb25maWd9e0JhcmNvZGVTZXR0aW5nfXtab25lfSAgICAgICAgICAgICB8fCAxMCwNCiAgICAgICAgICAgICdiYXJfZXh0ZW5kJyAgID0+ICRTZWxmLT57Q29uZmlnfXtCYXJjb2RlU2V0dGluZ317TG93ZXJNZW5kaW5nWm9uZX0gfHwgMTUsDQogICAgICAgICAgICAnZm9udCcgICAgICAgICA9PiAkU2VsZi0+e0NvbmZpZ317QmFyY29kZVNldHRpbmd9e0ZvbnR9ID8gJFBERk9iamVjdC0+e1BERn0tPmZvbnQoICRTZWxmLT57Q29uZmlnfXtCYXJjb2RlU2V0dGluZ317Rm9udH0gKSA6IHVuZGVmLA0KICAgICAgICAgICAgJ2ZvbnRfc2l6ZScgICAgPT4gJFNlbGYtPntDb25maWd9e0JhcmNvZGVTZXR0aW5nfXtGb250U2l6ZX0gICAgfHwgOCwNCiAgICAgICAgICAgICdiYXJfb3ZlcmZsb3cnID0+ICRTZWxmLT57Q29uZmlnfXtCYXJjb2RlU2V0dGluZ317QmFyT3ZlcmZsb3d9IHx8IDAuNSwNCiAgICAgICAgKTsNCg0KICAgICAgICAjIGJlIGNhdXRpb3VzIGFuZCBzZXQgY2FwdGlvbiBvbmx5IGlmIHdhbnRlZCwgYmVjYXVzZSBQREY6OkFQSTIgY2hlY2tzIHdpdGggJ2V4aXN0cycgYXQgb25lIHBvaW50DQogICAgICAgIGlmICggJFNlbGYtPntDb25maWd9e0JhcmNvZGVTZXR0aW5nfXtDYXB0aW9ufSApIHsNCiAgICAgICAgICAgICRPcHRpb25ze2NhcHRpb259ID0gJFBhcmFte0NvbmZpZ0l0ZW19eyAkU2VsZi0+e0NvbmZpZ317QmFyY29kZVNldHRpbmd9e0JhcmNvZGVGaWVsZH0gfTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIGRlbGV0ZSAkT3B0aW9uc3tjYXB0aW9ufTsNCiAgICAgICAgfQ0KDQogICAgICAgICMgYWRkIGJhcmNvZGUNCiAgICAgICAgbXkgJENvZGUgPSAkUERGT2JqZWN0LT57UERGfQ0KICAgICAgICAgICAgLT5iYXJjb2RlKA0KICAgICAgICAgICAgICAgICRTZWxmLT57Q29uZmlnfXtCYXJjb2RlU2V0dGluZ317Q29kZX0sDQogICAgICAgICAgICAgICAgJERhdGEsDQogICAgICAgICAgICAgICAgJU9wdGlvbnMsDQogICAgICAgICAgICApOw0KDQogICAgICAgICRQREZPYmplY3QtPntQREZ9LT5vcGVuX3BhZ2UoMSktPm9iamVjdCgNCiAgICAgICAgICAgICRDb2RlLA0KICAgICAgICAgICAgJFNlbGYtPntDb25maWd9e0JhcmNvZGVTZXR0aW5nfXtCYXJjb2RlUG9zaXRpb25fWH0sDQogICAgICAgICAgICAkU2VsZi0+e0NvbmZpZ317QmFyY29kZVNldHRpbmd9e0JhcmNvZGVQb3NpdGlvbl9ZfSwNCiAgICAgICAgICAgICRTZWxmLT57Q29uZmlnfXtCYXJjb2RlU2V0dGluZ317U2NhbGVfWH0sDQogICAgICAgICAgICAkU2VsZi0+e0NvbmZpZ317QmFyY29kZVNldHRpbmd9e1NjYWxlX1l9LA0KICAgICAgICApOw0KICAgIH0NCg0KICAgICMgcHJpbnQgRm9vdGVyDQogICAgaWYgKCAkU2VsZi0+e0NvbmZpZ317Rm9vdGVyU2V0dGluZ30gKSB7DQoNCiAgICAgICAgJFBERk9iamVjdC0+UG9zaXRpb25TZXQoDQogICAgICAgICAgICBYID0+ICRTZWxmLT57Q29uZmlnfXtGb290ZXJTZXR0aW5nfXtGb290ZXJQb3NpdGlvbl9YfSwNCiAgICAgICAgICAgIFkgPT4gJFNlbGYtPntDb25maWd9e0Zvb3RlclNldHRpbmd9e0Zvb3RlclBvc2l0aW9uX1l9LA0KICAgICAgICApOw0KDQogICAgICAgICMgZXZhbHVhdGUgRm9vdGVyVGV4dA0KICAgICAgICBteSAkRm9vdGVyVGV4dCA9ICRMYXlvdXRPYmplY3QtPk91dHB1dCgNCiAgICAgICAgICAgIFRlbXBsYXRlID0+ICRTZWxmLT57Q29uZmlnfXtGb290ZXJTZXR0aW5nfXtGb290ZXJUZXh0fSwNCiAgICAgICAgICAgIERhdGEgICAgID0+IFwlUmVhZGFibGVDb25maWdJdGVtRGF0YSwNCiAgICAgICAgKTsNCg0KICAgICAgICAkUERGT2JqZWN0LT5UZXh0KA0KICAgICAgICAgICAgVGV4dCAgICAgPT4gJEZvb3RlclRleHQsDQogICAgICAgICAgICBGb250ICAgICA9PiAkU2VsZi0+e0NvbmZpZ30tPntGb290ZXJTZXR0aW5nfS0+e0ZvbnR9LA0KICAgICAgICAgICAgRm9udFNpemUgPT4gJFNlbGYtPntDb25maWd9LT57Rm9vdGVyU2V0dGluZ30tPntGb250U2l6ZX0sDQogICAgICAgICAgICBDb2xvciAgICA9PiAkU2VsZi0+e0NvbmZpZ30tPntGb290ZXJTZXR0aW5nfS0+e0NvbG9yfSwNCiAgICAgICAgICAgIEFsaWduICAgID0+ICRTZWxmLT57Q29uZmlnfS0+e0Zvb3RlclNldHRpbmd9LT57QWxpZ259LA0KICAgICAgICAgICAgTGVhZCAgICAgPT4gJFNlbGYtPntDb25maWd9LT57Rm9vdGVyU2V0dGluZ30tPntMZWFkfSwNCiAgICAgICAgKTsNCiAgICB9DQoNCiAgICByZXR1cm4gMTsNCn0NCg0KMTsNCg==</File>
    </Filelist>
</otobo_package>